---
description:
globs:
alwaysApply: true
---
# Security & Compliance

## Financial Data Security Requirements

### Data Classification
- **Highly Confidential**: Portfolio holdings, performance data, client PII
- **Confidential**: Market data, FX rates, system configurations
- **Internal**: Application logs (sanitized), system metrics

### Authentication & Authorization
```csharp
// JWT-based authentication with role-based access
public class PortfolioAuthorizationHandler : AuthorizationHandler<ViewPortfolioRequirement, Portfolio>
{
    protected override Task HandleRequirementAsync(
        AuthorizationHandlerContext context,
        ViewPortfolioRequirement requirement,
        Portfolio portfolio)
    {
        var userId = context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // Check if user has access to this client's data
        if (portfolio.Client.AuthorizedUsers.Contains(userId) ||
            context.User.IsInRole("PortfolioManager"))
        {
            context.Succeed(requirement);
        }

        return Task.CompletedTask;
    }
}
```

### Data Encryption
- **At Rest**: Database encryption (TDE), file system encryption
- **In Transit**: HTTPS/TLS 1.3, certificate pinning
- **Application Level**: Sensitive fields encrypted with AES-256

```csharp
public class EncryptedAttribute : Attribute { }

public class Client
{
    public Guid Id { get; set; }

    [Encrypted]
    public string Name { get; set; } // Encrypted in database

    public DateTime CreatedAt { get; set; }
}
```

### Audit Trail
```csharp
public class AuditLog
{
    public Guid Id { get; set; }
    public string UserId { get; set; }
    public string Action { get; set; }  // CREATE, READ, UPDATE, DELETE
    public string EntityType { get; set; }
    public string EntityId { get; set; }
    public string Changes { get; set; } // JSON of before/after
    public DateTime Timestamp { get; set; }
    public string IpAddress { get; set; }
    public string UserAgent { get; set; }
}

// Automatic audit logging via EF Core interceptor
public class AuditInterceptor : SaveChangesInterceptor
{
    public override InterceptionResult<int> SavingChanges(DbContextEventData eventData, InterceptionResult<int> result)
    {
        LogAuditEntries(eventData.Context);
        return base.SavingChanges(eventData, result);
    }
}
```

## Compliance Standards

### GDPR Compliance
- **Data Minimization**: Only collect necessary portfolio data
- **Right to be Forgotten**: Soft delete with anonymization
- **Data Portability**: Export client data in standard formats
- **Consent Management**: Explicit consent for data processing

### SOX Compliance (if applicable)
- **Internal Controls**: Segregation of duties in data access
- **Change Management**: All code changes require approval
- **Data Integrity**: Checksums and validation for financial calculations

### Financial Regulations
- **MiFID II**: Transaction reporting, best execution records
- **GDPR**: Personal data protection for EU clients
- **SOC 2**: Security controls and monitoring

## Input Validation & Sanitization
```csharp
public class CreateHoldingValidator : AbstractValidator<CreateHoldingCommand>
{
    public CreateHoldingValidator()
    {
        RuleFor(x => x.Units)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Units cannot be negative");

        RuleFor(x => x.Date)
            .LessThanOrEqualTo(DateOnly.FromDateTime(DateTime.Today))
            .WithMessage("Cannot create holdings for future dates");

        RuleFor(x => x.InstrumentId)
            .NotEmpty()
            .WithMessage("Instrument ID is required");
    }
}
```

## Security Headers & CORS
```csharp
// Program.cs security configuration
builder.Services.AddCors(options =>
{
    options.AddPolicy("ProductionPolicy", policy =>
    {
        policy.WithOrigins("https://portfolio.yourcompany.com")
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials();
    });
});

app.UseSecurityHeaders(policies =>
    policies.AddFrameOptionsDeny()
            .AddXssProtectionBlock()
            .AddContentTypeOptionsNoSniff()
            .AddReferrerPolicyStrictOriginWhenCrossOrigin()
            .AddCsp(builder => builder
                .AddDefaultSrc().Self()
                .AddScriptSrc().Self().UnsafeInline()
                .AddStyleSrc().Self().UnsafeInline())
);
```

## Rate Limiting & DDoS Protection
```csharp
services.AddRateLimiter(options =>
{
    options.AddFixedWindowLimiter("api", limiterOptions =>
    {
        limiterOptions.PermitLimit = 100;
        limiterOptions.Window = TimeSpan.FromMinutes(1);
        limiterOptions.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;
    });
});
```

## Secrets Management
- **Development**: User secrets, appsettings.Development.json
- **Production**: Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault
- **Database Connections**: Managed identity where possible
- **API Keys**: Rotate regularly, monitor usage

## Security Testing
- **SAST**: SonarQube integration in CI/CD
- **Dependency Scanning**: Snyk or GitHub Dependabot
- **Penetration Testing**: Regular third-party security assessments
- **OWASP Top 10**: Address common web vulnerabilities

