---
description:
globs:
alwaysApply: true
---
# Frontend Architecture (React + TypeScript)

## Project Setup
- **Scaffold**: `pnpm create vite my-app --template react-ts`
- **State Management**: RTK Query for API calls and caching
- **Styling**: Modern CSS-in-JS or Tailwind CSS for clean UI
- **Component Library**: Consider MUI or Chakra UI for consistency

## Project Structure
```
/src
  /components
    /common       - Reusable UI components
    /portfolio    - Portfolio-specific components
    /tree         - Tree view components
  /features
    /clients      - Client management
    /portfolios   - Portfolio features
    /analytics    - TWR, contribution, attribution
  /hooks          - Custom React hooks
  /services       - RTK Query API slices
  /types          - TypeScript type definitions
  /utils          - Helper functions
```

## RTK Query Setup
```typescript
export const api = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),
  tagTypes: ['Client', 'Portfolio', 'Account', 'Holding'],
  endpoints: builder => ({
    getClients: builder.query<ClientVM[], void>(),
    getHoldings: builder.query<HoldingVM[], { id: string; date: string }>({
      query: ({ id, date }) => `portfolios/${id}/holdings?date=${date}`,
    }),
    calculateTwr: builder.query<TwrVM, { id: string; from: string; to: string }>({
      query: ({ id, from, to }) => `accounts/${id}/twr?from=${from}&to=${to}`,
    }),
  }),
});
```

## Key Components

### Tree View Structure
- `PortfolioTree` - Root tree component with recursive rendering
- `TreeNode` - Individual expandable node (Client/Portfolio/Account)
- `NodeMetrics` - Display TWR, contribution, attribution for each node
- `NodeActions` - Context menu for node operations

### Analytics Components
- `TwrCalculator` - Time weighted return display and controls
- `ContributionAnalysis` - Performance contribution breakdown
- `AttributionAnalysis` - Brinson-Fachler attribution tables
- `PerformanceChart` - Visual performance over time

## TypeScript Types
```typescript
interface ClientVM {
  id: string;
  name: string;
  portfolios: PortfolioVM[];
  metrics?: PerformanceMetrics;
}

interface PerformanceMetrics {
  twr: number;
  contribution: ContributionData[];
  attribution: AttributionData[];
}

interface HoldingVM {
  instrumentId: string;
  ticker: string;
  units: number;
  price: number;
  value: number; // Already converted to GBP
  type: 'Cash' | 'Security';
}
```

## State Management
- Use RTK Query for server state (portfolios, holdings, calculations)
- Local component state for UI interactions (expanded nodes, filters)
- Custom hooks for complex component logic
- Context for theme and user preferences

## Testing Strategy
- **Unit Tests**: Vitest + React Testing Library
- **Integration Tests**: MSW for API mocking
- **E2E Tests**: Consider Playwright for critical user flows
- **Accessibility**: Include a11y testing with jest-axe

